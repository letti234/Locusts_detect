/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[40.15034000249576, 10.399426781671016],
          [40.15034000249576, 8.405206112657574],
          [42.32563297124576, 8.405206112657574],
          [42.32563297124576, 10.399426781671016]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// // //  -----------------------------------------------------------------------
// // //  Call data
// // //  -----------------------------------------------------------------------


// //Resources from the book chapter
// var utils = require(
//     'users/parevalo_bu/gee-ccdc-tools:ccdcUtilities/api');

var palettes = require('users/gena/packages:palettes');


// //Forward and backward paths from HYSPLIT
// var fPaths = ee.FeatureCollection("users/salem043/Locusts/HYSPLIT/fwd_traj_output");
// var bPaths = ee.FeatureCollection("users/salem043/Locusts/HYSPLIT/bwd_traj_output");

// //FAO sightings data for 2014 only
// var swarms = ee.FeatureCollection("users/salem043/Locusts/FAO_data/Swarm_Master");
// var startDateMin = ee.Date('2014-01-01').millis();
// var startDateMax = ee.Date('2014-12-31').millis();
// var swarms = swarms.filter(ee.Filter.rangeContains('STARTDATE', startDateMin, startDateMax));

// // Regin of interest - change from small demo when ready to export data
// // var studyRegion = ee.FeatureCollection("FAO/GAUL/2015/level0")
// // .filter(ee.Filter.eq("ADM0_NAME", "Ethiopia"));

// Map.centerObject(studyRegion, 6);

// //  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// //  CCDC algorithm with MODIS NDVI
// //  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// // Define start, end dates and Landsat bands to use.
// var startDate = '2000-01-01';
// var endDate = '2014-01-01';
// var bands = ['NDVI', 'SWIR1', 'GREEN'];


// // Retrieve all clear, Landsat 4, 5, 7 and 8 observations (Collection 2, Tier 1).
// var filteredLandsat = utils.Inputs.getLandsat({
//         collection: 2
//     })
//     .filterBounds(studyRegion)
//     .filterDate(startDate, endDate)
//     .select(bands)
//     .map(function(image){return image.clip(studyRegion)});

// // print(filteredLandsat.first());



// // Set CCD params to use.
// var ccdParams = {
//     breakpointBands: ['NDVI', 'SWIR1', 'GREEN'],
//     tmaskBands: ['SWIR1', 'GREEN'],
//     minObservations: 6,
//     chiSquareProbability: 0.99,
//     minNumOfYearsScaler: 1.33,
//     dateFormat: 1,
//     lambda: 0.002,
//     maxIterations: 10000,
//     collection: filteredLandsat
// };

// var ccdResults = ee.Algorithms.TemporalSegmentation.Ccdc(ccdParams);
// print(ccdResults, "Results of CCDC estimation");

// //Variable arrays we want to extract per grid-cell:
//   //tBreak
//   //NDVI_Magnitude
  
// //Variables to use for subsetting
//   //changeProb

var ccdResults = ee.Image("users/salem043/Locusts/ccdTiles/ccd_tile_4");

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Explore data
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Subset of break dates
var change = ccdResults.select('tBreak');
print(change, "All temporal breaks");

//Subset of change probability
var changeProb = ccdResults.select('changeProb');


// Set the time range (2014 disturbances) and get as mask of 
// places that meet the condition.
var start = 2013;  
var end = 2014; 

//Create a mask of only dates within range and changeProb equal to 1
var mask = change.gt(start).and(change.lte(end)).and(changeProb.eq(
1));

//Apply mask to dates object, which should now be an array object only storing disturbances
//in 2014 with change probability of 1
var dates = change.arrayMask(mask).arrayPad([1]);

// Map.addLayer(dates, {}, "Mapping of dates object");


//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Get date of first change in array
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Use dates object to get layer of first date of disturbance
var firstChange = dates
    .arraySlice(0, 0, 1)
    .arrayFlatten([
        ['firstChange']
    ])
    .selfMask();
 
 var timeVisParams = {
    palette: palettes.colorbrewer.YlOrRd[9],
    min: start,
    max: end
};

Map.addLayer(firstChange, timeVisParams, 'first change');


//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Get magnitude of first change in array
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Get masked magnitudes.
var magnitude = ccdResults
    .select('NDVI_magnitude')   //Select NDVI magnitude
    .arrayMask(mask) //Mask properties from before: 2014 obs and change pr = 1
    .arrayPad([1]);

//Get magnitude of the first disturbance
var firstMag = magnitude
    .arraySlice(0, 0, 1)
    .arrayFlatten([
        ['firstMagnitude']
    ])
    .selfMask();
 
Map.addLayer(firstMag, timeVisParams, 'first mag');

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Get date of second change in array
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

var datesTwo = dates.updateMask(
  dates.arrayLength(0).gt(1)
)
//Use dates object to get layer of first date of disturbance
var secondChange = datesTwo
    .arraySlice(0, 0, 1)
    .arrayFlatten([
        ['firstChange']
    ])
    .selfMask();
 
 var timeVisParams = {
    palette: palettes.colorbrewer.YlOrRd[9],
    min: start,
    max: end
};

Map.addLayer(secondChange, timeVisParams, 'second change');

   