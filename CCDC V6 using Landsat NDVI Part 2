
// //  -----------------------------------------------------------------------
// //  Determine number of breaks in 2014
// //  -----------------------------------------------------------------------

var palettes = require('users/gena/packages:palettes');

var ccdResults = ee.Image("users/salem043/Locusts/ccdTiles/ccd_tile_4");


//Find change dates and change probability
var change = ccdResults.select('tBreak');
print(change, "All temporal breaks");
var changeProb = ccdResults.select('changeProb');


// Set the time range (2014 disturbances) and get as mask of 
// places that meet the condition.
var start = 2013;  
var end = 2014; 

//Create a mask of only dates within range and changeProb equal to 1
var mask = change.gt(start).and(change.lte(end)).and(changeProb.eq(
1));

// Map.addLayer(changeProb);
// print(changeProb);

//Calculate the number of breaks in 2014 by getting length of array
var numBreaks = mask.arrayReduce(ee.Reducer.sum(), [0]);
print(numBreaks, "Number of breaks");

// Map.addLayer(numBreaks, {min:0, max:3}, 'Number of breaks 2014');


//  -----------------------------------------------------------------------
//  Find the date of the first break detected in 2014
//  -----------------------------------------------------------------------

//Array Pad removes all of the entries that are 0 throughout
var dates = change.arrayMask(mask).arrayPad([1]);

print(dates);

//Use dates object to get layer of first date of disturbance
var firstChange = dates
    .arraySlice(0, 0, 1)
    .arrayFlatten([
        ['firstChange']
    ])
    .selfMask();
 
 var timeVisParams = {
    palette: palettes.colorbrewer.YlOrRd[9],
    min: start,
    max: end
};

Map.addLayer(firstChange, timeVisParams, 'first change');

   

//  -----------------------------------------------------------------------
//  Find the date of the second break detected in 2014
//  -----------------------------------------------------------------------

//From original object, mask out all pixels with array length less than 2
var withTwo = ccdResults.arrayMask(ccdResults.gt(0));


//Find change dates and change probability
var change = withTwo.select('tBreak');
// print(change, "All temporal breaks");
var changeProb = withTwo.select('changeProb');


// Set the time range (2014 disturbances) and get as mask of 
// places that meet the condition.
var start = 2013;  
var end = 2014; 

//Create a mask of only dates within range and changeProb equal to 1
var mask = change.gt(start).and(change.lte(end)).and(changeProb.eq(
1));

// Map.addLayer(changeProb);
// print(changeProb);

//Array Pad removes all of the entries that are 0 throughout
var dates = change.arrayMask(mask).arrayPad([1]);

print(dates);

//Use dates object to get layer of first date of disturbance
var secondChange = dates
    .arraySlice(0, 1, 2)
    .arrayFlatten([
        ['secondChange']
    ])
    .selfMask();
 
Map.addLayer(secondChange);

Export.image.toDrive({
  image: firstChange,
  scale: 30,
  description: 'firstChangeDate14',
  fileFormat: 'GEOTIFF',
  folder: "Locusts",
  maxPixels: 2e12,
});



Export.image.toDrive({
  image: secondChange,
  scale: 30,
  description: 'secondChangeDate14',
  fileFormat: 'GEOTIFF',
  folder: "Locusts",
  maxPixels: 2e12,
});


