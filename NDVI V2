//Locust identification
//Preliminary work


//Call on Ethiopia shapefile and NDVI data //////////////////////////////////
//Ethiopia shapefile

var ETH = ee.FeatureCollection("FAO/GAUL/2015/level0")
.filter(ee.Filter.eq("ADM0_NAME", "Ethiopia"));

//Clipped MODIS NDVI data
var modis = ee.ImageCollection('MODIS/061/MOD13Q1')
                  .map(function(image){return image.clip(ETH)});


var ndvi = modis.select('NDVI');
///print(ndvi,"MODIS NDVI raw");

//Nice visual parameters for mapping NDVI
var ndviVis = {
  min: 0.0,
  max: 8000.0,
  palette: [
    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301'
  ],
};

//Map.addLayer(ndvi, ndviVis, 'NDVI', 0);

//Download NDVI by layer
//var batch = require('users/fitoprincipe/geetools:batch');
//batch.Download.ImageCollection.toDrive(ndvi, "Ethiopia_NDVI", {scale:250});


//Call on swarm path data and merge by swarm_id /////////////////////////////

//Call on Hysplit model and sightings data
var fPaths = ee.FeatureCollection("users/salem043/Locusts/fwd_traj_output")
                .filterBounds(ETH);
                
var sights = ee.FeatureCollection("users/salem043/Locusts/swarms_clean")
                .filterBounds(ETH)
                .filter(ee.Filter.equals('startYr', 2014));
  

//Map.addLayer(fPaths.draw({color: 'red', strokeWidth: 1}), {}, 'Forward paths', 0);
//Map.addLayer(sights.draw({color: 'purple'}), {}, 'Sighting points', 0);




// Load the LineString feature collection
var lines = fPaths;

// Define a function to merge LineString features by 'swarm_id'
var mergeLinesBySwarmId = function(collection) {
  // Get the unique 'swarm_id' values
  var swarmIds = collection.aggregate_array('swarm_id').distinct();
  
  // Merge LineString features by 'swarm_id'
  var mergedLines = swarmIds.map(function(swarmId) {
    var filtered = collection.filter(ee.Filter.eq('swarm_id', swarmId));
    var mergedGeometry = ee.Geometry.MultiLineString(filtered.geometry().geometries());
    
    return ee.Feature(mergedGeometry).set('swarm_id', swarmId);
  });
  
  // Convert the merged LineString features to a FeatureCollection
  return ee.FeatureCollection(mergedLines);
};

// Merge LineString features by 'swarm_id'
var mergedFeatures = mergeLinesBySwarmId(lines);

// Print the merged LineString features
//print('Merged Lines:', mergedFeatures);

//Map.addLayer(mergedFeatures.limit(1), {}, "Merged feature collection");




//Demo for one path////////////////////////////////////////////////////////////

//Create a 5 km buffer around the path (can change to a differnt km)


var demoLine = mergedFeatures.filter(ee.Filter.eq('swarm_id', "22049_tmin2")).first();
var demoLineF = ee.Feature(demoLine);
//print("Multilinestring as FC", demoLineF);

var demoLineFC = ee.FeatureCollection([ee.Feature(demoLineF)]);

//print(demoLineFC);
Map.addLayer(demoLineFC, {color: 'blue', width: 2}, "Demo as FC", 0);


// Define the buffer distance in meters
var bufferDistance = 5000;

// Create a function to apply the buffer to each feature
var addBuffer = function(feature) {
  var bufferedFeature = feature.buffer(bufferDistance);
  return bufferedFeature;
};

// Apply the buffer to the feature collection
var bufferedCollection = demoLineFC.map(addBuffer);

// Print the resulting feature collection
print(bufferedCollection);
Map.addLayer(bufferedCollection, {color: 'red', opacity: 0.5}, 'Buffered Feature');
Map.addLayer(demoLineFC, {color: 'blue', width: 2}, "Demo as FC", 0);







//Clip one NDVI to the buffer





//Transform NDVI into feature collection that includes the swarm id 






//Collect mean NDVI for each observation 2000-2014 for each grid-cell.





