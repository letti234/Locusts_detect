/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.MultiPolygon(
        [[[[42.56528418215152, 10.219333171991519],
           [42.56528418215152, 9.948918230052866],
           [42.90586035402652, 9.948918230052866],
           [42.90586035402652, 10.219333171991519]]],
         [[[42.65513068819377, 9.417067230726424],
           [42.65513068819377, 9.417067230726424],
           [42.65513068819377, 9.417067230726424],
           [42.65513068819377, 9.417067230726424]]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  CCDC application of Locust Infestations in Ethiopia
//  MODIS NDVI attempt
//  Nov 2023
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Code developed from book, Cloud-Based Remote Sensing with Google Earth Engine,
// Part F4: Interpreting Image Series. The code uses the MODIS 250M resolution NDVI
// global data product 2000-2014 to detect time series disturbances at the grid-cell
// level in 2014. The code exports raster data for the date and severity of each
// disturbance (the first, second, third, etc.).

// For visual inspection, the code also calls on forward and backward paths from
// the HYSPLIT model to examine how they align with disturbances, as well as the
// FAO sighting data.

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Open packages and data
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Resources from the book chapter
var utils = require(
    'users/parevalo_bu/gee-ccdc-tools:ccdcUtilities/api');

var palettes = require('users/gena/packages:palettes');


//Forward and backward paths from HYSPLIT
var fPaths = ee.FeatureCollection("users/salem043/Locusts/fwd_traj_output");
var bPaths = ee.FeatureCollection("users/salem043/Locusts/bwd_traj_output");

//FAO sightings data for 2014 only
var swarms = ee.FeatureCollection("users/salem043/Locusts/Swarm_Master");
var startDateMin = ee.Date('2014-01-01').millis();
var startDateMax = ee.Date('2014-12-31').millis();
var swarms = swarms.filter(ee.Filter.rangeContains('STARTDATE', startDateMin, startDateMax));


// Regin of interest
var studyRegion = ee.FeatureCollection("FAO/GAUL/2015/level0")
.filter(ee.Filter.eq("ADM0_NAME", "Ethiopia"));

// var studyRegion = geometry;

Map.centerObject(studyRegion, 6);

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  CCDC algorithm with MODIS NDVI
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Define start, end dates and Landsat bands to use.
var startDate = '2000-01-01';
var endDate = '2014-01-01';
var bands = ['NDVI', 'SWIR1', 'GREEN'];


// Retrieve all clear, Landsat 4, 5, 7 and 8 observations (Collection 2, Tier 1).
var filteredLandsat = utils.Inputs.getLandsat({
        collection: 2
    })
    .filterBounds(studyRegion)
    .filterDate(startDate, endDate)
    .select(bands)
    .map(function(image){return image.clip(studyRegion)});

print(filteredLandsat.first());



// Set CCD params to use.
var ccdParams = {
    breakpointBands: ['NDVI', 'SWIR1', 'GREEN'],
    tmaskBands: ['SWIR1', 'GREEN'],
    minObservations: 6,
    chiSquareProbability: 0.99,
    minNumOfYearsScaler: 1.33,
    dateFormat: 1,
    lambda: 0.002,
    maxIterations: 10000,
    collection: filteredLandsat
};

var ccdResults = ee.Algorithms.TemporalSegmentation.Ccdc(ccdParams);
print(ccdResults, "Results of CCDC estimation");



var ethSeg = ee.FeatureCollection("users/salem043/Locusts/Segmented_Ethiopia_ADM1");
print(ethSeg);

var seg1 = ethSeg.filter(ee.Filter.eq("id", "00000000000000000000"));
Map.addLayer(seg1);


// // //Export results
// var exportResults = true;
// if (exportResults) {
//     // Create a metadata dictionary with the parameters and arguments used.
//     var metadata = ccdParams;
//     metadata['breakpointBands'] = metadata['breakpointBands'].toString();
//     metadata['startDate'] = startDate;
//     metadata['endDate'] = endDate;
//     metadata['bands'] = bands.toString();

//     // Export results, assigning the metadata as image properties.
//     // 
//     Export.image.toAsset({
//         image: ccdResults.set(metadata),
//         region: studyRegion,
//         pyramidingPolicy: {
//             ".default": 'sample'
//         },
//         scale: 30,
//         maxPixels: 2e12
//     });
// }

